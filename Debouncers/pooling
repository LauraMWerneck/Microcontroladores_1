/*
 * 05_main_pooling_deboucer.c
 *
 *  Created on: Mar 27, 2020
 *      Author: Renan Augusto Starke
 *      Instituto Federal de Santa Catarina
 *
 *      Exemplo de debouce de botão por pooling.
 *      Faz a verificação de botão periodicamente utilizando
 *      o comparador 0 do Timer B0
 *      Período do pooling deve ser maior que o tempo de
 *      instabilidade da chave.
 *
 *       .
 *      /|\                  +
 *       |                 +
 *       |               +
 *       |             +  <-- Comparador 0 (TBCCR0  -> TIMER0_B0_VECTOR) - Pooling do botão
 *       |           +
 *       |         +
 *       |       +
 *       |     +
 *       |   +
 *       | +
 *       +----------------------------------------->
 *
 *       - Comparadores podem ser configurados para qualquer valor
 *       entre 0 e 65535. IRQs devem ser habilitadas individuais
 *       nos respectivos registradores.
 *
 */

#ifndef __MSP430FR2355__
    #error "Clock system not supported for this device"
#endif

/* System includes */
#include <msp430.h>

#include <stdint.h>

/* Project includes */
#include "gpio.h"
#include "bits.h"

#define BUTTON_0 BIT3
#define BUTTON_PORT P2

volatile union button_state_t {
    uint8_t all_bits;
    struct {
       uint8_t b0 : 1;
   };
} buttons;

/**
  * @brief  Configura sistema de clock para usar o Digitally Controlled Oscillator (DCO).
  *         Utililiza-se as calibrações internas gravadas na flash.
  *         Exemplo baseado na documentação da Texas: msp430g2xxx3_dco_calib.c
  *         Configura ACLK para utilizar VLO = ~10KHz
  * @param  none
  *
  * @retval none
  */
void init_clock_system(void) {

    // Configure two FRAM wait state as required by the device data sheet for MCLK
    // operation at 24MHz(beyond 8MHz) _before_ configuring the clock system.
    FRCTL0 = FRCTLPW | NWAITS_2 ;

    P2SEL1 |= BIT6 | BIT7;                       // P2.6~P2.7: crystal pins
    do
    {
        CSCTL7 &= ~(XT1OFFG | DCOFFG);           // Clear XT1 and DCO fault flag
        SFRIFG1 &= ~OFIFG;
    } while (SFRIFG1 & OFIFG);                   // Test oscillator fault flag

    __bis_SR_register(SCG0);                     // disable FLL
    CSCTL3 |= SELREF__XT1CLK;                    // Set XT1 as FLL reference source
    CSCTL0 = 0;                                  // clear DCO and MOD registers

    /* Selecionar DCORSEL_xyz de acordo com a máxima frequência da CPU */
    CSCTL1 = DCORSEL_7;                          // Set DCO = 8MHz

    /* Ajustar o multiplicador (ex. 731) para a frequência desejada *
     *
     * F = 32768*731 / 1  ---->   (32768 * n) / FLLD_x
     */
    CSCTL2 = FLLD_0 + 731;                       // DCOCLKDIV = 32768*731 / 1
    __delay_cycles(3);
    __bic_SR_register(SCG0);                     // enable FLL
    while(CSCTL7 & (FLLUNLOCK0 | FLLUNLOCK1));   // FLL locked

    /* CSCTL4 = SELMS__DCOCLKDIV | SELA__REFOCLK;
     * set XT1 (~32768Hz) as ACLK source, ACLK = 32768Hz
     * default DCOCLKDIV as MCLK and SMCLK source
     - Selects the ACLK source.
     * 00b = XT1CLK with divider (must be no more than 40 kHz)
     * 01b = REFO (internal 32-kHz clock source)
     * 10b = VLO (internal 10-kHz clock source) (1)   */
    CSCTL4 = SELMS__DCOCLKDIV | SELA__REFOCLK;
}

/**
  * @brief  Configura temporizador A.
  *
  * @param  none
  *
  * @retval none
  */
void config_timerB_0(){
    /* Timer B0:
     *
     *
     * TASSEL_2 -> Clock de SMCLK.
     * MC_2 -> Contagem crescente.
     * ID_3 -> Prescaler = /8
     */
    TB0CTL = TBSSEL_2 | MC_2 | ID_3;

    /* IRQ por comparação entre contagem e comparador 0 */
    TB0CCTL0 = CCIE;
    /* Valor de comparação é 50000 */
    TB0CCR0 = 20000;
}


int main(void)
{
    volatile uint16_t my_data = 0;

    /* Desliga watchdog imediatamente */
    WDTCTL = WDTPW | WDTHOLD;


#if defined (__MSP430FR2355__)
    /* Disable the GPIO power-on default high-impedance mode */
    PM5CTL0 &= ~LOCKLPM5;
#endif

    /* Configura botões */
    /* BUTTON_PORT totalmente como entrada */
    PORT_DIR(BUTTON_PORT) = 0;
    /* Resistores de pull up */
    PORT_REN(BUTTON_PORT) = BUTTON_0;
    PORT_OUT(BUTTON_PORT) = BUTTON_0;
    /* Estado inicial do estado dos botões */
    buttons.all_bits = 0;

    /* Configurações de hardware */
    config_timerB_0();
    init_clock_system();


    P1DIR |= BIT0;
    CLR_BIT(P1OUT, BIT0);

    /* Entra em modo de economia de energia com IRQs habilitadas */
    __bis_SR_register(LPM0_bits + GIE);

    while (1){
           /* Atualiza valor do display em baixa prioridade */
           if (!buttons.b0)
               SET_BIT(my_data, BIT0);
               SET_BIT(P1OUT, BIT0);
           else if (!buttons.b1)
               SET_BIT(my_data, BIT4);
           else
               my_data = 0;

           /* Desligar CPU novamente */
          __bis_SR_register(LPM0_bits);
       }

}


/* ISR0 do Timer B: executado no evento de comparação  comparador 0 (TACCR0)
 *
 * Utilizado para o debouncer por pooling: faz a verificação de botão
 * periodicamente. Período do pooling deve ser maior que o tempo de
 * instabilidade da chave.
 *
 * */
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=TIMER0_B0_VECTOR
__interrupt void TIMER0_B0_ISR (void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(TIMER0_B0_VECTOR))) Timer_B (void)
#else
#error Compiler not supported!
#endif
{
    /* Leitura do estado de todos os botões */
    buttons.all_bits = PORT_IN(BUTTON_PORT) & 0x07;

    /* Caso deseja ler apenas um, ou se botões estiver em portas diferentes
      buttons.b0 = !TST_BIT(PORT_IN(BUTTON_PORT), BUTTON_0);
    */

    /* Debug: Pisca P1.0 quando detectado algum botão */
  //CPL_BIT(P1OUT, BIT0);


    /* Se algum botão foi apertado acorda o main */
    if (buttons.all_bits != 0x07){
               /* Acorda função main */
        __bic_SR_register_on_exit(LPM0_bits);
    }
}
